@page "/Dash"
@using System.ComponentModel.DataAnnotations
@using BlazorMqttDatabase.Services
@using robot_app.Components.Pages
@rendermode InteractiveServer

@inject SqlUserRepository SqlUserRepository
@inject MqttExternalMessageProcessingService MqttService
@inject MqttData MqttData


<div id="dashboard" class="page">
    <div class="dashboardContainer">
        <div class="topSection">
            <div class="timersContent">
                <h2>Timers <i class="fa fa-solid fa-circle-info"></i</h2>
                <ul>
                    @foreach(Timer timer in SqlUserRepository.Timers.Values) {
                        <li>
                            <label for="@timer.TimerId">@timer.Date.ToString("HH:mm") - @GetCategoryText(timer.Category). </label>
                            <div class="form-check form-switch">
                                <input class="form-check-input" id="@timer.TimerId flexSwitchCheckDefault" @onclick="async () => await SwitchTimerStatus(timer.TimerId, !timer.IsActive)" type="checkbox" role="switch" checked=@timer.IsActive/>
                            </div>
                        </li>
                    }
                </ul>
            </div>
            <div class="chartContent">
                <h2>Activiteitenlogs <i class="fa fa-solid fa-circle-info"></i</h2>
                <div class="chart">
                    <p>(Coming Soon)</p>
                </div>
            </div>
        </div>
        <div class="activityContent">
            <h2>Activiteitenlogs <i class="fa fa-solid fa-circle-info"></i</h2>
            <div class="logs">
                <ul>
                    @if(parsedMqttDataHistory.Count == 0)
                    {
                        <li class="nothingToShow">
                            <p>
                                <p>Niks om weer te geven</p>
                            </p>
                        </li>
                    }
                    else
                    {
                        @foreach(string item in parsedMqttDataHistory) {
                            <li>
                                <p>
                                    @item
                                </p>
                            </li>
                        }
                    }
                </ul>
            </div>
        </div>
    </div>
</div>

@code {
    private bool isProcessing = false;
    private Dictionary<DateTime, string> filteredMqttDataHistory = new Dictionary<DateTime, string>();
    private List<string> parsedMqttDataHistory = new List<string>();
    private readonly TimeZoneInfo timeZone = TimeZoneInfo.FindSystemTimeZoneById("Europe/Amsterdam");
    private DateTime currentTime;
    private DateTime previousTime;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Updates every second the reminders, chart and activity logs on screen
        if(firstRender) 
        {
            var timer = new System.Threading.Timer(e => {
                InvokeAsync(() => {
                    DateTime newTime = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, timeZone);
                    if(newTime != currentTime)
                    {
                        previousTime = currentTime;
                        currentTime = newTime;
                        if(!isProcessing) {
                            _ = Task.Run(RefreshPage);
                        }
                        StateHasChanged();
                    }
                });
            }, null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
        }
    }

    private async Task RefreshPage()
    {
        bool newLogAdded = false;

        foreach (KeyValuePair<string, object> item in MqttData.dataHistory)
        {
            if (MqttData.dataHistory.Count == 1)
            {
                switch (item.Key)
                {
                    case "batteryVoltage":
                        if (!filteredMqttDataHistory.ContainsKey(currentTime))
                        {
                            filteredMqttDataHistory.Add(currentTime, $"Batterijvoltage is momenteel {item.Value}mV");
                            newLogAdded = true;
                        }
                        break;
                    case "motionDetection":
                        if (item.Value is bool motionDetection)
                        {
                            string motionDetected = motionDetection ? "" : "geen";
                            if (!filteredMqttDataHistory.ContainsKey(currentTime))
                            {
                                filteredMqttDataHistory.Add(currentTime, $"Tijdens de meting is er {motionDetected} beweging gedetecteerd");
                                newLogAdded = true;
                            }
                        }
                        break;
                    default:
                        break;
                }
            }
        }

        // Alleen de logs bijwerken als er nieuwe activiteit is toegevoegd
        if (newLogAdded)
        {
            foreach (KeyValuePair<DateTime, string> innerItem in filteredMqttDataHistory)
            {
                parsedMqttDataHistory.Add($"{innerItem.Key}: {innerItem.Value}");
            }

            filteredMqttDataHistory.Clear();
        }

        // Maak de data history leeg
        MqttData.dataHistory = new Dictionary<string, object>();
        isProcessing = false;
    }

    private async Task SwitchTimerStatus(int timerId, bool status)
    {
        await SqlUserRepository.UpdateTimerStatus(timerId, status);
        await SqlUserRepository.InitializeData();
    }
    private string GetCategoryText(string category)
    {
        foreach (var categoryOption in categories)
        {
            if (categoryOption.Value == category)
            {
                return categoryOption.Text;
            }
        }
        return "Onbekende categorie";
    }
    public class CategoryOption
    {
        public string Value { get; set; }
        public string Text { get; set; }
    }

    private List<CategoryOption> categories = new List<CategoryOption>
    {
        new CategoryOption { Value = "TimeToEat", Text = "Het is tijd om te eten." },
        new CategoryOption { Value = "TimeToBrushTeeth", Text = "Het is tijd om uw tanden te poetsen." },
        new CategoryOption { Value = "TimeToSleep", Text = "Het is tijd om te slapen." },
        new CategoryOption { Value = "TimeToWakeUp", Text = "Het is tijd om op te staan." },
        new CategoryOption { Value = "TurnOffLivingRoomLight", Text = "Vergeet niet de huiskamerverlichting uit te schakelen." },
        new CategoryOption { Value = "TimeForMedication", Text = "Het is tijd voor uw medicatie." },
        new CategoryOption { Value = "TimeToRest", Text = "Het is tijd om uit te rusten." },
        new CategoryOption { Value = "TimeForExercise", Text = "Laten we een korte wandeling maken." },
        new CategoryOption { Value = "TimeToDrink", Text = "Vergeet niet om wat water te drinken." },
        new CategoryOption { Value = "TimeToCheckBloodSugar", Text = "Vergeet niet om uw bloedsuiker te controleren." },
        new CategoryOption { Value = "TimeForAppointment", Text = "U heeft een afspraak, controleer uw agenda." },
        new CategoryOption { Value = "TimeToRelax", Text = "Laten we wat ontspannen." },
        new CategoryOption { Value = "TimeToRead", Text = "Laten we samen een boek lezen." },
        new CategoryOption { Value = "TimeToListenMusic", Text = "Laten we naar wat muziek luisteren." },
        new CategoryOption { Value = "TimeToCallHealthCareProvider", Text = "Het is tijd om uw zorgverlener te bellen." },
        new CategoryOption { Value = "TimeToCheckMail", Text = "Vergeet niet uw post te controleren." },
        new CategoryOption { Value = "TimeToWaterPlants", Text = "Laten we de planten water geven." },
        new CategoryOption { Value = "TimeToFeedPet", Text = "Het is tijd om uw huisdier te voeren." },
        new CategoryOption { Value = "TimeToShower", Text = "Het is tijd om een douche te nemen." },
        new CategoryOption { Value = "TimeToChangeClothes", Text = "Laten we uw kleding verwisselen." },
        new CategoryOption { Value = "TimeToCheckCalendar", Text = "Bekijk uw agenda voor de komende afspraken." },
        new CategoryOption { Value = "TimeToDoExercise", Text = "Laten we wat lichte oefeningen doen." },
        new CategoryOption { Value = "TimeToDoBreathingExercise", Text = "Laten we een ademhalingsoefening doen." },
        new CategoryOption { Value = "TimeToDoStretching", Text = "Laten we wat rek- en strekoefeningen doen." },
        new CategoryOption { Value = "TimeToDoMemoryGame", Text = "Laten we een geheugenspel spelen." },
        new CategoryOption { Value = "TimeToDoPuzzle", Text = "Laten we samen een puzzel maken." },
        new CategoryOption { Value = "TimeToDoCraft", Text = "Laten we wat knutselen." },
        new CategoryOption { Value = "TimeToDoGardening", Text = "Laten we wat tuinieren." },
        new CategoryOption { Value = "TimeToDoCooking", Text = "Het is tijd om te koken." },
        new CategoryOption { Value = "TimeToDoCleaning", Text = "Laten we wat opruimen." },
        new CategoryOption { Value = "TimeToDoShopping", Text = "Het is tijd om de boodschappen te doen." },
        new CategoryOption { Value = "TimeToDoLaundry", Text = "Laten we de was doen." },
        new CategoryOption { Value = "TimeToDoIroning", Text = "Laten we strijken." },
        new CategoryOption { Value = "TimeToDoDishes", Text = "Vergeet de afwas niet te doen." },
        new CategoryOption { Value = "TimeToDoReading", Text = "Laten we samen een boek lezen." },
        new CategoryOption { Value = "TimeToDoWriting", Text = "Laten we samen schrijven." },
        new CategoryOption { Value = "TimeToDoDrawing", Text = "Laten we samen tekenen." },
        new CategoryOption { Value = "TimeToDoPainting", Text = "Laten we samen schilderen." },
        new CategoryOption { Value = "TimeToDoSinging", Text = "Laten we samen zingen." },

        // Music
        new CategoryOption { Value = "FrancisWells", Text = "Francis Wells - Live a Little" },
        new CategoryOption { Value = "Portal", Text = "Portal 4000 Degrees Kelvin" }
    };
}    
