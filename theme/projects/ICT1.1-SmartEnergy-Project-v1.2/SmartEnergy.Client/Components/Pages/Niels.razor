@page "/Niels"
@rendermode InteractiveServer
@attribute [StreamRendering]
@inject IMeasurementRepository measurementRepository

<PageTitle>Niels Jansen</PageTitle>

<header>   
    <h1 class="assignment">Opdrachtvariant H</h1>
    <p>
        In onderstaande grafiek kunt u zien of een bepaald huishouden op een goedkoop of duur moment stroom verbruikt. De rode lijn geeft 
        de gemiddelde en dynamische prijs weer. De groene lijn toont of het gemiddelde huishouden op een goedkoop of duur moment 
        elektriciteit verbruikt. Tot slot geeft de blauwe lijn het elektriciteitsverbruik van het door u geselecteerde huishouden aan.
    </p>
    <p><b>naam: </b>Niels Jansen</p>
    <p><b>klas: </b>230ICTVTE2</p>
</header>
<main>
    <table>
        <td><b>Huidige prijs per kWh</b> €</td>
        <td class="optionMenu">
            <label for="smartmeter">Huishouden</label>
            <select name="smartmeter" id="smartmeter" class="btn btn-secondary" @onchange="UpdateSmartmeter">
                <option value="EC2AAB" class="dropdown-item">EC2AAB</option>
                <option value="default" class="dropdown-item">default</option>
            </select>
        </td>
         <td class="optionMenu">
            <label for="time">Tijd</label>
            <select name="time" id="time" class="btn btn-secondary" @onchange="UpdateTime">
                <option value="day" class="dropdown-item">1 dag</option>
                <option value="month" class="dropdown-item">30 dagen</option>
            </select>
        </td>
    </table>
    <div class="wormChart">
        <LineChart @ref="lineChart"/>
    </div>
</main>

@code {
    private int smartmeterId = 0xEC2AAB;
    private string smartmeterName = "EC2AAB";
    private int time = 1;
    private List<Measurement>? measurements;
    private LineChart lineChart = default!;
    private LineChartOptions lineChartOptions = default!;
    private ChartData chartData = default!;

    // Method to load measurements data
    protected override async Task OnInitializedAsync() {
        await LoadMeasurementsAsync();
    }

    protected override async void OnInitialized() {
        SetChartOptions();
        SetChartDataset();
        await UpdateChartAsync();
    }

    private async Task LoadMeasurementsAsync() {
        measurements = await measurementRepository.GetEnergyConsumed(smartmeterId, time, "5m");
    }

    private async Task UpdateChart() {
        await LoadMeasurementsAsync();
        SetChartOptions();
        SetChartDataset();
        await UpdateChartAsync();
    }

    private void SetChartOptions() {
        lineChartOptions = new LineChartOptions {
            Interaction = new Interaction {
                Mode = InteractionMode.Index
            },
            Plugins = new LineChartPlugins {
                Title = new ChartPluginsTitle {
                    Text = "Dynamische Energieprijzen",
                    Display = true,
                    Font = new ChartFont { Size = 30 }
                }
            },
            Responsive = true,
            Scales = new Scales {
                X = new ChartAxes {
                    Title = new ChartAxesTitle {
                        Text = (time == 1 ? DateTime.Now.ToString("dd MMMM") : DateTime.Now.ToString("MMMM")), Display = true
                    }
                },
                Y = new ChartAxes {
                    Title = new ChartAxesTitle {
                        Text = "Valuta = EURO (€)", Display = true
                    }
                },
            }
        };
    }

    private void SetChartDataset() {
        var labels = Enumerable.Range(1, time).Select(i => i.ToString()).ToList();
        var datasets = new List<IChartDataset> {
            new LineChartDataset {
                Label = $"Dynamische energieprijs: €{smartmeterName}",
                Data = new List<double?>{ 9, 20, 29, 33, 50, 66, 75, 86, 91, 105, 120, 126, 141, 150, 156, 164, 177, 180, 184, 195 },
                BackgroundColor = "rgb(88, 80, 141)",
                BorderColor = "rgb(88, 80, 141)",
                BorderWidth = 2
            },
            new LineChartDataset {
                Label = $"Smartmeter {smartmeterName}",
                Data = new List<double?>{ 1, 1, 8, 19, 24, 26, 39, 47, 56, 66, 75, 88, 95, 100, 109, 114, 124, 129, 140, 142 },
                BackgroundColor = "rgb(255, 166, 0)",
                BorderColor = "rgb(255, 166, 0)",
                BorderWidth = 2
            },
            new LineChartDataset {
                Label = "Gemiddelde huishouden",
                Data = new List<double?>{ 1, 4, 8, 4, 24, 26, 39, 3, 56, 66, 75, 88, 95, 132, 109, 114, 124, 129, 140, 250 },
                BackgroundColor = "rgb(0, 166, 0)",
                BorderColor = "rgb(0, 166, 0)",
                BorderWidth = 2
            }
        };

        chartData = new ChartData {
            Labels = labels,
            Datasets = datasets
        };
    }

    protected async Task UpdateChartAsync() {
        if (lineChart != null) {
            await lineChart.UpdateAsync(chartData, lineChartOptions);
        }
    }

    protected async Task UpdateSmartmeter(ChangeEventArgs e) {
        var value = e.Value?.ToString();
        if(!string.IsNullOrEmpty(value)) {
            if(value == "default") {
                smartmeterName = "default";
                smartmeterId = 1078608;
            } else {
                Int32 meter = Convert.ToInt32(value, 16);
                switch(meter) {
                    case 0xEC2AAB:
                        smartmeterName = "EC2AAB";
                        smartmeterId = meter;
                        break;
                    default:
                        Console.WriteLine($"Smartmeter \"{meter}\" doesn't exist");
                        break;
                }
            }
            await UpdateChart();
        }
    }

    protected async Task UpdateTime(ChangeEventArgs e) {
        var value = e.Value?.ToString();
        if (!string.IsNullOrEmpty(value)) {
            time = value == "day" ? 1 : 30;
            await UpdateChart();
        }
    }       

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            await lineChart.InitializeAsync(chartData, lineChartOptions);
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}